
[Language(Lua)]
namespace ALittle;

using HttpSender = HttpSenderTemplate<lua.__CPPAPIHttpInterface>;
using HttpFileSender = HttpFileSenderTemplate<lua.__CPPAPIHttpFileInterface>;

public enum VersionProcess
{
    VERSION_NONEED_UPDATE = 1;        // 已经是最新版本，不需要更新
    VERSION_NEED_UPDATE_ADD = 2;        // 需要更新小版本，用于只做版本检查使用
    VERSION_NEED_UPDATE_FORCE = 3;        // 需要更新大版本，用于只做版本检查使用

    UPDATE_VERSION_FAILED = 11;        // 更新失败_update_path
    UPDATE_VERSION_SUCCEED = 12;        // 更新成功
    UPDATE_VERSION_INSTALL = 13;        // 需要重新安装
}

// 版本db文件
// SmallVersion 表
// c_file_path 文件路径
// c_file_size 文件大小
// c_type 文件类型(Script, UI, Texture, Font, Sound, Other, Protocol)
// c_width 当文件类型是图片的时候，会有这个值，否则为0
// c_height 当文件类型是图片的时候，会有这个值，否则为0
// c_md5 文件的MD5值，用来判断文件是否有改变
// c_update_time 版本时间
// c_update_index 版本序列
// c_is_delete 是否删除 1表示删除, 0表示增加或者修改文件

// BigVersion 表
// c_big_version 大版本号，用来标记是否强制更新
// c_install_version 安装版本号，用来标记是否强制更新
// c_db_version 数据库版本号，用来标记是否进行一次全面的文件对比

// VersionLog 版本更新内容
// c_content 更新内容
// c_create_time 更新时间
// c_create_index 更新序列

public struct VersionInstallInfo
{
    string c_file_path;
    int c_file_size;
    int start_size;
}

public struct VersionDownloadInfo : SmallVersionInfo
{
    int start_size;
}

public struct BigVersionInfo
{
    string c_big_version; // 大版本号，用来标记是否强制更新
    string c_install_version; // 安装版本号，用来标记是否强制安装
    string c_db_version; // 数据库版本号，用来标记是否进行一次全面的文件对比
}

public struct SmallVersionInfo
{
    string c_file_path; // 文件路径
    int c_file_size; // 文件大小
    string c_type; // 文件类型(Script, UI, Texture, Font, Sound, Other, Protocol)
    int c_width; // 当文件类型是图片的时候，会有这个值，否则为0
    int c_height; // 当文件类型是图片的时候，会有这个值，否则为0
    string c_md5; // 文件的MD5值，用来判断文件是否有改变
    int c_update_time; // 版本时间
    int c_update_index; // 版本序列
    int c_is_delete; // 是否删除 1表示删除, 0表示增加或者修改文件
}

public struct VersionLogInfo
{
    string c_content; // 更新内容
    int c_create_time; // 更新时间
    int c_create_index; // 更新序列
}

public class VersionSystem
{
    // 对比update_time大小
    public static UpdateTimeIndexComp(SmallVersionInfo a, SmallVersionInfo b) : int
    {
        if (a == null && b == null)
            return 0;
        if (b == null)
            return 1;
        if (a == null)
            return -1;
        if (a.c_update_time > b.c_update_time)
            return 1;
        if (a.c_update_time < b.c_update_time)
            return -1;
        if (a.c_update_index > b.c_update_index)
            return 1;
        if (a.c_update_index < b.c_update_index)
            return -1;
        return 0;
    }

    private string  _account_name;
    private string  _module_name;
    private string  _install_name;
    private string  _module_path;
    private string  _update_path;
    private Functor<(string, int, int, int, int)> _callback;
    private bool    _check;

    private string  _cur_in_version;
    private string  _cur_in_version_tmp;
    private string  _tmp_in_version;
    private string  _new_in_version;
    private string  _new_version_tmp;

    private BigVersionInfo      _cur_big_version;
    private SmallVersionInfo    _cur_small_version;

    private bool    _doing;
    private bool    _big_version;
    private VersionInstallInfo  _install_info;
    private VersionServer.AUpdateVersion _update_info;

    private List<VersionDownloadInfo>   _download_list;
    private int _download_list_count;
    private int _total_repeat_count;
    private int _remain_repeat_count;

    private int _cur_file_index;
    private int _file_count;
    private int _total_update_size;
    private int _current_update_size;
    private int _current_file_size;
    private HttpFileSender _current_request;
    private HttpSender _ask_update_request;

    private string _ip;
    private int _port;

    public ctor(string account_name, string module_name)
    {
        this._account_name = account_name;
        this._module_name = module_name;
        this._install_name = "install.xxx";
        this._module_path = "Module/" .. module_name .. "/";    // 模块基本路径
        this._update_path = "Update/" .. module_name .. "/";       // 更新下载路径
        this._check = null;            // 是否是检查版本
        this._callback = null;        // 版本更新后的回调函数（回调参数有：更新状态[-1:更新失败，0：正在更新，1：更新成功，2：不需要更新，3：版本文件下载失败]，下载的文件名，当前大小，总大小）
    
        // 版本文件名当前正在处理的版本文件名
        this._cur_in_version = "CurVersionPackage.db"; // 文件在模块的根目录，用于记录当前的版本号
        var platform = System_GetPlatform();
        if (platform == "Android" || platform == "iOS") this._cur_in_version = "CurVersion.db";
        this._cur_in_version_tmp = "CurVersionTmp.db"; // // CurVersion.db的临时文件名
        this._tmp_in_version = "TmpVersion.db"; // 文件在Update里面的模块根目录，用于标记版本在下载并且还没下载完
        this._new_in_version = "NewVersion.db"; // 文件在Update里面的模块根目录，用于记录当前最新版本的版本信息
        this._new_version_tmp = "NewVersionTmp.db"; // NewVersion.db的临时文件名，避免NewVersion.db只下载到一半就停止了，这样的NewVersion.db这个文件是不能用的，下载完成后重命名为NewVersion.db
    
        this._doing = false; // 用来标记是否正在进行版本处理
    
        this._big_version = false;        // 是否是大版本
        this._install_info = null;        // 保存安装包的信息
    
        this._download_list = new List<VersionDownloadInfo>();        // 下载列表
        this._download_list_count = 0;
        this._total_repeat_count = 0;    // 总共重复下载的次数
        this._remain_repeat_count = 0;   // 剩余重复下载的次数
    
        this._cur_file_index = 0;        // 当前下载的文件索引
        this._file_count = 0;            // 需要下载的文件数量
        this._total_update_size = 0;    // 需要下载的总量
        this._current_update_size = 0;    // 之前文件已下载的量
        this._current_file_size = 0;    // 当前文件已下载的量
        this._current_request = null;    // 当前文件下载请求
        this._ask_update_request = null;  // 当前检查更新请求
    }

    public static CreateVersionSystem(string account_name, string module_name) : VersionSystem
    {
        var platform = System_GetPlatform();
        if (platform == "Android")
            return new VersionSystemAndroid(account_name, module_name);
        elseif (platform == "iOS")
            return new VersionSystemIOS(account_name, module_name);
        elseif (platform == "Windows")
            return new VersionSystemWindows(account_name, module_name);
        return null;
    }

    // 获取版本信息
    public fun GetVersionInfo(string db_path, int get_log_count) : BigVersionInfo, SmallVersionInfo, List<string>
    {
        // 检查文件是否存在
        if (File_GetFileAttr(db_path) == null)
            return null, null, null;

        var big_version:BigVersionInfo;
        var small_version:SmallVersionInfo;

        // 从CurVersion.db文件中读入版本信息
        var sqlite = lua.sqlite3.open(db_path);
        // 读取所有信息
        var stmt = sqlite.prepare("SELECT * FROM BigVersion");
        for (var row in stmt.nrows{BigVersionInfo}())
            big_version = row;
        stmt.reset();
        // 读取小版本信息
        stmt = sqlite.prepare("SELECT * FROM SmallVersion ORDER BY c_update_time DESC,c_update_index DESC LIMIT 1");
        for (var row in stmt.nrows{SmallVersionInfo}())
            small_version = row;
        stmt.reset();
        // 读取日志信息
        if (get_log_count == null) get_log_count = 1;
        stmt = sqlite.prepare("SELECT * FROM VersionLog ORDER BY c_create_time DESC,c_create_index DESC LIMIT ?");
        stmt.bind_values(get_log_count);
        var log_list = new List<string>();
        var log_list_count = 0;
        for (var row in stmt.nrows{VersionLogInfo}())
        {
            ++ log_list_count;
            log_list[log_list_count] = row.c_content;
        }
        stmt.reset();

        sqlite.close();

        return big_version, small_version, log_list;
    }

    // 内部调用，用于获取当前的版本号
    public fun GetCurVersion([Nullable] int get_log_count) : BigVersionInfo, SmallVersionInfo, List<string>
    {
        return this.GetVersionInfo(File_BaseFilePath() .. this._module_path .. this._cur_in_version, get_log_count);
    }

    // 调用完UpdateVersion，再调用这个函数才有意义
    public fun GetNewVersion([Nullable] int get_log_count) : BigVersionInfo, SmallVersionInfo, List<string>
    {
        return this.GetVersionInfo(File_BaseFilePath() .. this._update_path .. this._new_in_version, get_log_count);
    }

    // 获取最新版本的日志
    public fun GetNewLogList() : List<string>
    {
        if (this._update_info == null) return null;
        return this._update_info.log_list;
    }

    public get doing() : bool
    {
        return this._doing;
    }

    public get total_update_size() : int
    {
        return this._total_update_size;
    }

    public get current_update_size() : int
    {
        return this._current_update_size + this._current_file_size;
    }

    public static RefreshVersion()
    {
        var platform = System_GetPlatform();
        if (platform == "Android" || platform == "iOS")
            VersionSystem.AppRefreshVersion();
        else
        	VersionSystem.DestopRefreshVersion();
    }

    // 如果是桌面软件
    private static DestopRefreshVersion()
    {
    }

    // 如果安装包里面的版本文件比外面的新，那么就把外面的覆盖掉
    private static AppRefreshVersion()
    {
        // 检查模块路径是否存在，如果不存在就直接返回
        if (File_GetFileAttr(File_BaseFilePath() .. "Module") == null) return;

            // 获取模块文件下的所有模块名称
        var folder_list = carp.GetFolderNameListInFolder(File_BaseFilePath() .. "Module");
        // 遍历模块列表
        for (var index, file in folder_list)
        {
            // 获取模块路径
            var module_path = "Module/" .. file;
            // 检查外面是否有CurVersion.db文件
            // 如果没有说明就不用对比了，外面也没有对应的应用文件
            if (File_GetFileAttr(File_BaseFilePath() .. module_path .. "/CurVersion.db") != null)
            {
                var change = false;
                // 把APK里面的CurVersionPackage.db文件复制出来，不然Sqlite3打不开
                var succeed = File_CopyFile(module_path .. "/CurVersionPackage.db", File_BaseFilePath() .. module_path .. "/CurVersionInstall.db");
                if (succeed)
                {
                    // 如果失败了，说明当前模块是通过直接下载的，安装包内部没有
                    // 然后对比一下，两个db文件之间的版本信息
                    var sqlite_out = lua.sqlite3.open(File_BaseFilePath() .. module_path .. "/CurVersion.db");
                    if (sqlite_out != null)
                    {
                        var sqlite_in = lua.sqlite3.open(File_BaseFilePath() .. module_path .. "/CurVersionInstall.db");
                        if (sqlite_in != null)
                        {
                            // 取出两个update和index最大的那么进行对比
                            var sql = "SELECT c_update_time,c_update_index FROM SmallVersion ORDER BY c_update_time DESC,c_update_index DESC LIMIT 1";
                            // 取里面的
                            var stmt_in = sqlite_in.prepare(sql);
                            var update_time_in:SmallVersionInfo = null;
                            for (var row in stmt_in.nrows{SmallVersionInfo}())
                                update_time_in = row;
                            stmt_in.reset();

                            // 取外面的
                            var stmt_out = sqlite_out.prepare(sql);
                            var update_time_out:SmallVersionInfo = null;
                            for (var row in stmt_out.nrows{SmallVersionInfo}())
                                update_time_out = row;
                            stmt_out.reset();

                            // 检查里面最大的比外面大
                            var comp = VersionSystem.UpdateTimeIndexComp(update_time_in, update_time_out);
                            if (comp > 0)
                            {
                                // 从sqlite_in文件里面获取比update_time_out大的所有信息
                                var stmt = sqlite_in.prepare("SELECT * FROM SmallVersion WHERE c_update_time>? OR (c_update_time=? AND c_update_index>?)");
                                stmt.bind_values(update_time_out.c_update_time, update_time_out.c_update_time, update_time_out.c_update_index);
                                for (var row in stmt.nrows{SmallVersionInfo}())
                                {
                                    // 把对应的文件删掉
                                    Log("安装包的版本比热更新版本高，删掉热更新文件:", File_BaseFilePath() .. module_path .. "/" .. row.c_file_path);
                                    File_DeleteFile(File_BaseFilePath() .. module_path .. "/" .. row.c_file_path); // 删掉文件
                                    change = true;
                                }
                                stmt.reset();
                            
                                // 取里面的大版本信息
                                sql = "SELECT * FROM BigVersion";
                                // 取里面的
                                stmt_in = sqlite_in.prepare(sql);
                                var big_version_in:BigVersionInfo = null;
                                for (var row in stmt_in.nrows{BigVersionInfo}())
                                    big_version_in = row;
                                stmt_in.reset();

                                // 取外面的
                                stmt_out = sqlite_out.prepare(sql);
                                var big_version_out:BigVersionInfo = null;
                                for (var row in stmt_out.nrows{BigVersionInfo}())
                                    big_version_out = row;
                                stmt_out.reset();

                                // 如果数据库版本不一致，那么就需要重新对比文件
                                // 如果里面文件没有，外面文件有，那么说明外面属于残留文件
                                if (big_version_in != null && big_version_out != null && big_version_in.c_db_version != big_version_out.c_db_version)
                                {
                                    change = true;
                                    // 获取外面没有删除的所有文件信息
                                    stmt_out = sqlite_out.prepare("SELECT * FROM SmallVersion WHERE c_is_delete=0");
                                    // 然后到里面查询是否有该文件，如果里面没有该文件，就要删除
                                    stmt_in = sqlite_in.prepare("SELECT * FROM SmallVersion WHERE c_is_delete=0 AND c_file_path=?");
                                    for (var row in stmt_out.nrows{SmallVersionInfo}())
                                    {
                                        stmt_in.bind_values(row.c_file_path);
                                        var has = false;
                                        for (var _ in stmt_in.nrows{SmallVersionInfo}())
                                        {
                                            has = true;
                                            break;
                                        }
                                        stmt_in.reset();
                                        // 里面文件没有，那么就要删除
                                        if (has == false)
                                        {
                                            Log("删掉残留文件:", File_BaseFilePath() .. module_path .. "/" .. row.c_file_path);
                                            File_DeleteFile(File_BaseFilePath() .. module_path .. "/" .. row.c_file_path); // 删掉文件
                                        }
                                    }
                                    stmt_out.reset();
                                }
                            }
                            sqlite_in.close();
                        }
                        sqlite_out.close();
                    }
                }

                    // 检查是否出现了版本更新
                if (change == true)
                {
                    // 把原来的CurVersion.db删掉，然后把CurVersionInstall名字改为把原来的CurVersion
                    File_DeleteFile(File_BaseFilePath() .. module_path .. "/CurVersion.db"); // 删掉文件
                    File_RenameFile(File_BaseFilePath() .. module_path .. "/CurVersionInstall.db", File_BaseFilePath() .. module_path .. "/CurVersion.db");
                }
                else
                {
                    File_DeleteFile(File_BaseFilePath() .. module_path .. "/CurVersionInstall.db"); // 删掉文件
                }
            }
        }
    }

    // 执行版本更新的所有操作
    public fun UpdateModule()
    {
        // 获取更新目录
        var update_path = File_BaseFilePath() .. "Update/" .. this._module_name;
        // 获取模块目录
        var module_path = File_BaseFilePath() .. "Module/" .. this._module_name;

        // 把版本文件从安装包或者安装目录里面复制出来
        if (File_GetFileAttr(module_path .. "/"..this._cur_in_version) == null)
        {
            // 先复制，然后在改变名字。担心复制一般的时候app被关掉了，或者手机突然没电了。
            // 文件改名速度比较快，如果这个都出错，那就卸载重新安装吧~
            File_MakeDeepDir(module_path);
            File_CopyFile("Module/" .. this._module_name .. "/CurVersionPackage.db", module_path .. "/CurVersionInstall.db");
            File_RenameFile(module_path .. "/CurVersionInstall.db", module_path .. "/"..this._cur_in_version);
        }

        // 检查更新目录是否存在，不存在就直接返回
        if (File_GetFileAttr(update_path) == null) return;

        // 检查是否有正在下载版本文件，如果正在下载说明还未准备完毕，直接返回
        var tmp_version = update_path .. "/" .. this._tmp_in_version;
        if (File_GetFileAttr(tmp_version) != null) return;

        // 获取当前版本信息
        var cur_big_version, cur_small_version = this.GetCurVersion();
        // 获取最新版本信息
        var new_big_version, new_small_version = this.GetNewVersion();

        // 如果当前已经比新的版本文件一样或者更新了，那么就直接返回
        if (VersionSystem.UpdateTimeIndexComp(cur_small_version, new_small_version) >= 0)
        {
            // 删除更新目录，没有用了。也防止下次进行无效检查
            File_DeleteDeepDir(update_path, false);
            return;
        }

        // 检查是否有安装包，如果有则启动安装程序
        var install_path = update_path .. "/" .. this._install_name;
        if (File_GetFileAttr(install_path) != null)
        {
            // 复制一份版本文件到临时文件，故意变成下载一半的状态，以便于下次进行更新检查的时候不会重新下载
            File_CopyFile(update_path .. "/" .. this._new_in_version, update_path .. "/" .. this._tmp_in_version);
            // 没有安装包则直接复制内容
        }
        else
        {
            // Update目录的文件全部复制到Module中
            File_MakeDeepDir(module_path);
            Log("Update目录的文件全部复制到Module中.", update_path, module_path);
            File_CopyDeepDir(update_path, module_path, null, true);
            // 然后删除掉要删除的文件
            var sqlite_new = lua.sqlite3.open(update_path .. "/" .. this._new_in_version);
            var stmt = sqlite_new.prepare("SELECT * FROM SmallVersion WHERE (c_update_time>? OR (c_update_time=? AND c_update_index>?)) AND c_is_delete=1");
            if (cur_small_version == null)
                stmt.bind_values(0, 0, 0);
            else
                stmt.bind_values(cur_small_version.c_update_time, cur_small_version.c_update_time, cur_small_version.c_update_index);
            for (var row in stmt.nrows{SmallVersionInfo}())
            {
                Log("删掉残留文件.", module_path .. "/" .. row.c_file_path);
                File_DeleteFile(module_path .. "/" .. row.c_file_path); // 删掉文件
            }
            stmt.reset();
            // 执行到这里，最新的版本文件全部更新完成。

            // 检查数据库版本是否一致，如果不一致就要进行全面比对检查
            // 如果新版本文件没有，并且旧版本文件有。那么就要删除掉这种残留文件
            if (cur_big_version != null && cur_big_version.c_db_version != new_big_version.c_db_version)
            {
                // 读取当前版本文件
                var sqlite_cur = lua.sqlite3.open(module_path .. "/" .. this._cur_in_version);
                if (sqlite_cur != null)
                {
                    // 获取当前版本所有有效文件路径
                    var stmt_cur = sqlite_cur.prepare("SELECT * FROM SmallVersion WHERE c_is_delete=0");
                    // 获取最新版本所有有效文件路径
                    var stmt_new  = sqlite_new.prepare("SELECT * FROM SmallVersion WHERE c_is_delete=0 AND c_file_path=?");
                    // 遍历当前版本信息
                    for (var row in stmt_cur.nrows{SmallVersionInfo}())
                    {
                        // 把文件路径作为参数到最新版本文件里面查
                        stmt_new.bind_values(row.c_file_path);
                        var has = false;
                        for (var _ in stmt_new.nrows{SmallVersionInfo}())
                        {
                            has = true;
                            break;
                        }
                        stmt_new.reset();
                        // 如果最新版本文件里面没有，那么就要删除该文件
                        if (has == false)
                        {
                            Log("删掉残留文件.", module_path .. "/" .. row.c_file_path);
                            File_DeleteFile(module_path .. "/" .. row.c_file_path); // 删掉文件
                        }
                    }
                    stmt_cur.reset();
                    sqlite_cur.close();
                }
            }
            sqlite_new.close();

            // 新版本文件复制到当前目录
            // 这里先只一份临时版本文件，然后删除原来的版本文件，再改名
            // 目的是为了防止期间app被关掉，或者断电等原因执行一半
            File_CopyFile(update_path .. "/" .. this._new_in_version, module_path .. "/" .. this._cur_in_version_tmp);
            File_DeleteFile(module_path .. "/" .. this._cur_in_version); // 删掉文件
            File_RenameFile(module_path .. "/" .. this._cur_in_version_tmp, module_path .. "/" .. this._cur_in_version);
            // 删除更新内容
            Log("删除Update目录的全部文件", update_path);
            File_DeleteDeepDir(update_path, true);
        }
    }

    // 获取最新版本的更新信息
    public get update_info() : VersionServer.AUpdateVersion { return this._update_info; }

    // ip 版本服务器的ip，可以填写域名
    // port 版本服务器的端口
    // callback 版本更新回调函数 参数列表为：进度枚举VersionProcess，文件名，当前下载的文件大小，需要下载的大小总量，当前第几个文件，文件总数
    // check true表示只是检查，不直接更新。如果不填，那么检查到需要更新版本就直接更新了
    // repeat_count 因为http下载文件比较容易断开，所以这个用来表示重复的次数，不填或者填null表示默认不会重复
    // return 错误类型
    public await fun UpdateVersion(string ip, int port, Functor<(string, int, int, int, int)> callback, bool check, [Nullable] int repeat_count) : int
    {
        if (this._doing == true)
        {
            Log("VersionSystem.UpdateVersion, already in updating!");
            return VersionProcess.UPDATE_VERSION_FAILED;
        }
        // 回调函数不能为空
        if (ip == null)
        {
            Log("VersionSystem.UpdateVersion, ip must not be null!");
            return VersionProcess.UPDATE_VERSION_FAILED;
        }
        // 回调函数不能为空
        if (port == null)
        {
            Log("VersionSystem.UpdateVersion, port must not be null!");
            return VersionProcess.UPDATE_VERSION_FAILED;
        }

        //信息初始化阶段/////////////////////////////////////////////////////////////////////////////////////////////////
        // 保存回调
        this._callback = callback;
        this._check = check;
        this._ip = ip;
        this._port = port;

        // 初始化变量
        this._install_info = null;
        this._update_info = null;

        this._download_list = new List<VersionDownloadInfo>();
        this._download_list_count = 0;
        if (repeat_count == null) repeat_count = 0;
        this._total_repeat_count = repeat_count;
        if (this._total_repeat_count < 0)
            this._total_repeat_count = 0;
        this._remain_repeat_count = this._total_repeat_count;

        this._cur_file_index = 0;
        this._file_count = 0;
        this._total_update_size = 0;
        this._current_update_size = 0;
        this._current_file_size = 0;

        // 获取当前版本信息
        this._cur_big_version, this._cur_small_version = this.GetCurVersion();

        //查询是否需要更新版本///////////////////////////////////////////////////////////////////////////////////////////
        {
            var param = new VersionServer.QUpdateVersion();
            if (this._cur_big_version != null)
            {
                param.big_version = this._cur_big_version.c_big_version;
                param.install_version = this._cur_big_version.c_install_version;
            }
            if (this._cur_small_version != null)
            {
                param.small_version_time = this._cur_small_version.c_update_time;
                param.small_version_index = this._cur_small_version.c_update_index;
            }
            param.platform = System_GetPlatform();
            param.module_name = this._module_name;
            param.account_name = this._account_name;
            this._ask_update_request = new HttpSender(this._ip, this._port);
            this._doing = true;
            var error, result = VersionServer.HandleHttpQUpdateVersion(this._ask_update_request, param);
            this._ask_update_request = null;
            if (error != null)
            {
                Log("VersionSystem:UpdateVersion error:"..error);
                this._doing = false;
                return VersionProcess.UPDATE_VERSION_FAILED;
            }
            ///////////////////////////////////////////////////////////////////////////////////////////////////////////////
            // 已经有回复了，那么就置空
            this._ask_update_request = null;

            // 检查是否有错误
            if (error != null)
            {
                Log("VersionSystem:UpdateVersion error:"..error);
                this._doing = false;
                return VersionProcess.UPDATE_VERSION_FAILED;
            }

            // 检查是否要更新
            if (result.result == false)
            {
                // 无需下载
                this._doing = false;
                return VersionProcess.VERSION_NONEED_UPDATE;
            }

            // 保存当前要更新的版本号
            this._update_info = result;

            // 如果只是检查，那么对比下是大版本更新还是小版本更新
            if (this._check)
            {
                this._doing = false;
                // 需要下载
                if (this._cur_big_version == null || result.version_info.big_version != this._cur_big_version.c_big_version)
                    return VersionProcess.VERSION_NEED_UPDATE_FORCE;
                else
                    return VersionProcess.VERSION_NEED_UPDATE_ADD;
            }

            // 检查安装包版本号是否一致
            if (this._cur_big_version == null || this._update_info.version_info.install_version != this._cur_big_version.c_install_version)
            {
                this._install_info = new VersionInstallInfo();
                this._install_info.c_file_path = this._install_name;
                this._install_info.c_file_size = this._update_info.version_info.install_size;
                this._install_info.start_size = 0;
            }
            else
                this._install_info = null;

            // 创建Update目录
            File_MakeDeepDir(File_BaseFilePath() .. "Update/" .. this._module_name);
        }

        //下载最新的版本文件///////////////////////////////////////////////////////////////////////////////////////////
        {
            var param = new VersionServer.QDownloadVersionFile();
            param.platform = System_GetPlatform();
            param.version_id = this._update_info.version_info.version_id;
            param.file_path = "CurVersionPackage.db";
            this._current_request = new HttpFileSender(this._ip, this._port, File_BaseFilePath() .. this._update_path .. this._new_version_tmp, 0, null);
            var error = VersionServer.HandleHttpQDownloadVersionFile(this._current_request, param);
            this._current_request = null;
            if (error != null)
            {
                // 表示版本文件下载失败
                this._doing = false;
                return VersionProcess.UPDATE_VERSION_FAILED;
            }

            // 将临时版本文件名改为正式的版本文件名
            File_RenameFile(File_BaseFilePath() .. this._update_path .. this._new_version_tmp, File_BaseFilePath() .. this._update_path .. this._new_in_version);
            // 打开最新版本文件
            var sqlite_new = lua.sqlite3.open(File_BaseFilePath() .. this._update_path .. this._new_in_version);
            if (sqlite_new != null)
            {
                // 从sqlite_in文件里面获取比update_time_out大的所有信息
                var stmt = sqlite_new.prepare("SELECT * FROM SmallVersion WHERE (c_update_time>? OR (c_update_time=? AND c_update_index>?)) AND c_is_delete=0");
                if (this._cur_small_version == null)
                    stmt.bind_values(0, 0, 0);
                else
                    stmt.bind_values(this._cur_small_version.c_update_time, this._cur_small_version.c_update_time, this._cur_small_version.c_update_index);
                for (var row in stmt.nrows{VersionDownloadInfo}())
                {
                    // 开始下载位置为0
                    row.start_size = 0;
                    // 添加到下载列表
                    ++ this._download_list_count;
                    this._download_list[this._download_list_count] = row;
                }
                stmt.reset();
                sqlite_new.close();
            }
            else
            {
                // 这个情况出现的原因是在提交版本的时候出现错误才会发生
                // 就是说服务器上面的版本文件，本身就不完整
                Log("VersionSystem error. new_version_db open failed!");
                // 删除掉Update里面对应的模块目录，等待下次执行更新
                File_DeleteDeepDir(File_BaseFilePath() .. "Update/" .. this._module_name, false);
                this._doing = false;
                return VersionProcess.UPDATE_VERSION_FAILED;
            }

            // 如果有下载安装包，那么就只下载安装包
            if (this._install_info != null)
            {
                this._download_list = new List<VersionDownloadInfo>();
                this._download_list_count = 1;

                var download_info = new VersionDownloadInfo();
                download_info.c_file_path = this._install_info.c_file_path;
                download_info.c_file_size = this._install_info.c_file_size;
                download_info.start_size = this._install_info.start_size;
                this._download_list[this._download_list_count] = download_info;
            }

            // 检查是否有文件需要更新
            this._file_count = this._download_list_count;
            this._cur_file_index = 0;
            if (this._file_count > 0)
            {
                // 计算本次更新的数据总大小
                for (var k, v in this._download_list)
                    this._total_update_size = this._total_update_size + v.c_file_size;

                // 之前如果有下载，并且没有下载完成，就检查一下下载进度，从上次结束的点继续下载
                var new_md5 = File_Md5(File_BaseFilePath() .. this._update_path .. this._new_in_version);
                var tmp_md5:string = null;
                if (File_GetFileAttr(File_BaseFilePath() .. this._update_path .. this._tmp_in_version) != null)
                    tmp_md5 = File_Md5(File_BaseFilePath() .. this._update_path .. this._tmp_in_version);
                if (new_md5 == tmp_md5)
                {
                    // 把已经下载好的移除列表，下载到一半的标记大小
                    var new_download_list = new List<VersionDownloadInfo>();
                    var new_download_list_count = 0;
                    for (var k, v in this._download_list)
                    {
                        var file_attr = File_GetFileAttr(File_BaseFilePath() .. this._update_path .. v.c_file_path);
                        if (file_attr == null)
                        {
                            ++ new_download_list_count;
                            new_download_list[new_download_list_count] = v;
                        }
                        elseif (file_attr.size < v.c_file_size)
                        {
                            // 记录这个文件的当前大小
                            v.start_size = file_attr.size;
                            // 把这个文件放在队列第一个，这样可以第一个下载
                            ++ new_download_list_count;
                            lua.table.insert(new_download_list, 1, v);

                            this._current_update_size = this._current_update_size + file_attr.size;
                        }
                        else
                        {
                            // 如果已经下载好了的，就把这个加到当前已下载的大小中
                            this._current_update_size = this._current_update_size + file_attr.size;
                        }
                    }
                    // 保存新的列表
                    this._download_list = new_download_list;
                    this._download_list_count = new_download_list_count;
                }
                else
                {
                    // 复制一份版本文件到临时文件
                    File_CopyFile(File_BaseFilePath() .. this._update_path .. this._new_in_version, File_BaseFilePath() .. this._update_path .. this._tmp_in_version);
                }

                this._remain_repeat_count = this._total_repeat_count;
                // 开始下载
                return this.DownloadNext();
            }
            else
            {
                // 无需下载
                this._doing = false;
                return VersionProcess.VERSION_NONEED_UPDATE;
            }
        }
    }

    public await fun DownloadNext() : int
    {
        // 获取下载列表的个数
        var count = this._download_list_count;
        // 如果已经下载完毕，那么就可以调用成功回调函数
        if (count == 0)
        {
            // 标记为没有正在更新
            this._doing = false;
            // 删除tmp文件
            File_DeleteFile(File_BaseFilePath() .. this._update_path .. this._tmp_in_version);
            // 如果有安装包的话，就安装
            if (this._install_info != null)
                return VersionProcess.UPDATE_VERSION_INSTALL;

            // 因为程序刚打开的时候会马上加载引擎代码，所以这里必须先把引擎代码覆盖过去。
            // 所以不能在打开程序之后在处理引擎代码更新
            if (File_GetFileAttr(File_BaseFilePath() .. this._update_path .. "CEngine") != null)
            {
                // 创建Engine目录
                File_MakeDir(File_BaseFilePath() .. this._module_path .. "CEngine");
                // 开始深度复制
                File_CopyDeepDir(File_BaseFilePath() .. this._update_path .. "CEngine", File_BaseFilePath() .. this._module_path .. "CEngine", null, false);
            }
            // 提示重启更新
            return VersionProcess.UPDATE_VERSION_SUCCEED;
        }

        ++ this._cur_file_index;
        // 取出第一个下载文件信息，并从列表中移除
        var file_info = this._download_list[1];
        lua.table.remove(this._download_list, 1);
        -- this._download_list_count;
        // 开始下载
        var file_full_path = File_BaseFilePath() .. this._update_path .. file_info.c_file_path;
        var file_path = File_GetFilePathByPath(file_full_path);
        // 获取文件名
        Log("begin download remain_count(" .. this._remain_repeat_count .. ")." .. file_full_path, "start size:" .. file_info.start_size);
        if (file_path != "") File_MakeDeepDir(file_path);

        // 再次初始化这个变量
        this._current_file_size = file_info.start_size;

        var param = new VersionServer.QDownloadVersionFile();
        param.platform = System_GetPlatform();
        param.start_size = file_info.start_size;
        param.version_id = this._update_info.version_info.version_id;
        param.file_path = file_info.c_file_path;
        this._current_request = new HttpFileSender(this._ip, this._port, file_full_path, file_info.start_size, bind(this.DownloadUpdateFileCallback, this, file_info));
        var error = VersionServer.HandleHttpQDownloadVersionFile(this._current_request, param);
        if (error != null)
        {
            this._current_request = null;
            if (this._remain_repeat_count <= 0)
            {
                this._doing = false;
                return VersionProcess.UPDATE_VERSION_FAILED;
            }

            // 剩余次数减一
            -- this._remain_repeat_count;

            -- this._cur_file_index;
            lua.table.insert(this._download_list, 1, file_info);
            ++ this._download_list_count;

            // 获取文件信息，如果没有，那么开始下载的大小还是0，否则填为当前文件的大小
            var file_attr = File_GetFileAttr(file_full_path);
            if (file_attr != null)
            {
                // 把当前已经下载完成的加进来
                this._current_update_size = this._current_update_size + file_attr.size - file_info.start_size;
                // 然后把他设置为当前大小位置
                file_info.start_size = file_attr.size;
            }
            else
            {
                // 把当前已经加进来的都扣掉
                this._current_update_size = this._current_update_size - file_info.start_size;
                // 然后起始点重新设置为0
                file_info.start_size = 0;
            }
            this._current_file_size = 0;
        }
        else
        {
            Log("download succeed." .. file_full_path);
            this._current_update_size = this._current_update_size + this._current_request.GetTotalSize();
            this._remain_repeat_count = this._total_repeat_count;
            this._current_file_size = 0;

            this._current_request = null;
        }

        return this.DownloadNext();
    }
    
    // 下载更新文件回调
    public fun DownloadUpdateFileCallback(VersionDownloadInfo file_info, HttpFileSender file)
    {
        var file_name = file.GetFilePath();
        var cur_size = file.GetCurSize();
        var total_size = file.GetTotalSize();

        this._current_file_size = cur_size;
        this._callback(file_name, cur_size, total_size, this._cur_file_index, this._file_count);
    }

    public fun StopUpdate()
    {
        if (this._doing != true)
            return;
        if (this._ask_update_request != null)
        {
            this._ask_update_request.Stop();
            this._ask_update_request = null;
        }
        if (this._current_request != null)
        {
            this._current_request.Stop();
            this._current_request = null;
        }
    }

    public fun Install([Nullable] string install_name)
    {
        // 什么都不处理
    }
}