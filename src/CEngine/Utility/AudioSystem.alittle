
namespace ALittle;

struct ChunkInfo
{
    string file_path;
    Functor<(string, int)> callback;
    int channel;
    double volume;
    bool mute;

    PIXI.IMediaInstance instance;
}

class AudioSystem
{
    private Map<int, ChunkInfo> _chunk_map;
    private bool                _app_background;
    private bool                _all_mute;
    private double              _stream_volume;
    private bool				_stream_mute;

    [Language(JavaScript)]
    private int				_chunk_creator_id = 0;
    [Language(JavaScript)]
    private Map<string, bool>  _file_map = new Map<string, bool>();

    [Language(JavaScript)]
    private javascript.AudioContext _audio_context;
    [Language(JavaScript)]
    private javascript.ScriptProcessorNode _audio_script_node;

    private int				_stream_sample_rate = 8000;
    private int				_stream_sample_channels = 1;

    private List<int>		  _stream_left_sample = new List<int>();
    private int			    _stream_left_sample_len = 0;
    private List<int>		  _stream_right_sample = new List<int>();
    private int			    _stream_right_sample_len = 0;
    
    public ctor()
    {
        this._chunk_map = new Map<int, ChunkInfo>();
    
        this._app_background = false;
        this._all_mute = false;
        this._stream_volume = 1.0;
        this._stream_mute = false;

        A_OtherSystem.AddEventListener(this, this.HandleDidEnterBackground);
        A_OtherSystem.AddEventListener(this, this.HandleDidEnterForeground);
    }

    public fun Setup(int sample_rate, int channels)
    {
        [Language(Lua)]
        __CPPAPI_AudioSystem.Setup(sample_rate, channels);
    }
    
    //////////////////////////////////-监听APP前后台切换//////////////////////////////////-
    public fun HandleDidEnterBackground(AppDidEnterBackground event)
    {
        this._app_background = true;
        this.UpdateAllVolume();
    }
    
    public fun HandleDidEnterForeground(AppDidEnterForeground event)
    {
        this._app_background = false;
        this.UpdateAllVolume();
    }
    
    private fun UpdateChannelVolume(ChunkInfo info)
    {
        var real_volume = info.volume;
        if (info.mute || this._app_background || this._all_mute)
            real_volume = 0;
        [Language(Lua)]
        __CPPAPI_AudioSystem.SetChannelVolume(info.channel, real_volume);
        [Language(JavaScript)]
        // 因为PIXI.sound.play在未加载资源完成之前返回的instance是Promise，而不是PIXI.IMediaInstance
        if (info.instance.set != null)
        	info.instance.set("volume", real_volume);
    }

    private fun UpdateStreamVolume()
    {
        var real_volume = this._stream_volume;
        if (this._stream_mute || this._app_background || this._all_mute)
            real_volume = 0;
        __CPPAPI_AudioSystem.SetStreamVolume(real_volume);
    }
    
    private fun UpdateAllVolume()
    {
        for (var k, v in this._chunk_map)
            this.UpdateChannelVolume(v);
        this.UpdateStreamVolume();
    }
    
    public fun SetAllMute(bool mute)
    {
        if (this._all_mute == mute)
            return;
        this._all_mute = mute;
        this.UpdateAllVolume();
    }
    
    public fun GetAllMute() : bool
    {
        return this._all_mute;
    }
    
    //////////////////////////////////////-Mixer部分//////////////////////////////////////-
    public fun AddChunkCache(string file_path)
    {
        [Language(Lua)]
        __CPPAPI_AudioSystem.AddChunkCache(file_path);
        [Language(JavaScript)]
        PIXI.sound.add(file_path, file_path);
        [Language(JavaScript)]
        this._file_map[file_path] = true;
    }
    
    public fun RemoveChunkCache(string file_path)
    {
        [Language(Lua)]
        __CPPAPI_AudioSystem.RemoveChunkCache(file_path);
        [Language(JavaScript)]
        PIXI.sound.remove(file_path);
        [Language(JavaScript)]
        this._file_map[file_path] = false;
    }
    
    public fun StartChannel(string file_path, [Nullable] int loop, [Nullable] Functor<(string, int)> callback) : int
    {
        if (loop == null) loop = 1;

        [Language(Lua)]
        {
            var channel = __CPPAPI_AudioSystem.StartChannel(file_path, loop);
            if (channel < 0)
                return -1;
        
            var info = new ChunkInfo();
            info.file_path = file_path;
            info.callback = callback;
            info.channel = channel;
            info.volume = __CPPAPI_AudioSystem.GetChannelVolume(channel);
            info.mute = false;
            this._chunk_map[channel] = info;
            this.UpdateChannelVolume(info);
            return channel;
        }

        [Language(JavaScript)]
        {
            if (this._file_map[file_path] == null)
            {
                this._file_map[file_path] = true;
                PIXI.sound.add(file_path, file_path);
            }

            this._chunk_creator_id += 1;
            var channel = this._chunk_creator_id;
            
            var options = new PIXI.PlayOptions();
            options.loop = loop != 1;
            options.complete = bind(this.HandleAudioChannelStoppedEvent, this, channel);
            var instance = PIXI.sound.play(file_path, options);

            var info = new ChunkInfo();
            info.file_path = file_path;
            info.callback = callback;
            info.channel = channel;
            info.instance = instance;
            info.volume = 1;
            info.mute = false;
            this._chunk_map[channel] = info;
            this.UpdateChannelVolume(info);

            return channel;
        }
    }
    
    public fun StopChannel(int channel)
    {
        var info = this._chunk_map[channel];
        if (info == null)
            return;
    
        this._chunk_map[channel] = null;

        [Language(Lua)]
        __CPPAPI_AudioSystem.StopChannel(channel);
        [Language(JavaScript)]
        info.instance.stop();
    }
    
    public fun SetChannelMute(int channel, bool mute)
    {
        var info = this._chunk_map[channel];
        if (info == null)
            return;
        if (info.mute == mute)
            return;
        info.mute = mute;
        this.UpdateChannelVolume(info);
    }
    
    public fun GetChannelMute(int channel) : bool
    {
        var info = this._chunk_map[channel];
        if (info == null)
            return false;
        return info.mute;
    }
    
    // 设置音量
    // volume  取值 0-1
    public fun SetChannelVolume(int channel, double volume)
    {
        var info = this._chunk_map[channel];
        if (info == null)
            return;
        info.volume = volume;
        this.UpdateChannelVolume(info);
    }
    
    // 获取音量
    public fun GetChannelVolume(int channel) : double
    {
        var info = this._chunk_map[channel];
        if (info == null)
            return 0;
        return info.volume;
    }
    
    public fun HandleAudioChannelStoppedEvent(int channel)
    {
        var info = this._chunk_map[channel];
        if (info == null)
            return;
        this._chunk_map[channel] = null;
    
        if (info.callback == null)
            return;
        info.callback(info.file_path, info.channel);
    }
    /////////////////////////////////////////////////////////////////////
    public fun StartStream(int sample_rate, int channels) : bool
    {
        this.StopStream();

        this._stream_sample_rate = sample_rate;
        this._stream_sample_channels = channels;

        [Language(JavaScript)]
        {
            var options = new javascript.AudioContextOptions();
            options.sampleRate = sample_rate;

            if (javascript.AudioContext != null)
            	this._audio_context = new javascript.AudioContext(options);
            elseif (javascript.webkitAudioContext != null)
                this._audio_context = new javascript.webkitAudioContext(options);
            else return false;

            this._audio_script_node = this._audio_context.createScriptProcessor(4096, 0, channels);
            this._audio_script_node.onaudioprocess = bind(this.OnAudioProcess, this);
            this._audio_script_node.connect(this._audio_context.destination);

            return true;
        }

        [Language(Lua)]
        return __CPPAPI_AudioSystem.StartStream(sample_rate, channels);
    }

    [Language(JavaScript)]
    private fun OnAudioProcess(javascript.AudioProcessingEvent event)
    {
        var left_buffer = event.outputBuffer.getChannelData(0);
        var right_buffer = event.outputBuffer.getChannelData(1);

        if (this._stream_sample_channels >= 1)
        {
            var length = left_buffer.length;
            var buffer = cast<List<double>>(left_buffer);

            if (length > this._stream_left_sample_len)
            {
                for (var i = 1; i <= length; 1)
                    buffer[i] = 0;
                return;
            }

            for (var i = 1; i <= length; 1)
                buffer[i] = this._stream_left_sample[i] / 32768;

            for (var i = length + 1; i <= this._stream_left_sample_len; 1)
                this._stream_left_sample[i - length] = this._stream_left_sample[i];
            this._stream_left_sample_len -= length;
        }

        if (this._stream_sample_channels >= 2)
        {
            var length = right_buffer.length;
            var buffer = cast<List<double>>(right_buffer);

            if (length > this._stream_right_sample_len)
            {
                for (var i = 1; i <= length; 1)
                    buffer[i] = 0;
                return;
            }

            for (var i = 1; i <= length; 1)
                buffer[i] = this._stream_right_sample[i] / 32768;

            for (var i = length + 1; i <= this._stream_right_sample_len; 1)
                this._stream_right_sample[i - length] = this._stream_right_sample[i];
            this._stream_right_sample_len -= length;
        }
    }

    // left_sample和right_sample都是short值
    public fun PushStreamSample(int left_sample, int right_sample)
    {
        [Language(JavaScript)]
        {
            this._stream_left_sample_len += 1;
            this._stream_left_sample[this._stream_left_sample_len] = left_sample;

            this._stream_right_sample_len += 1;
            this._stream_right_sample[this._stream_right_sample_len] = right_sample;
        }

        [Language(Lua)]
        __CPPAPI_AudioSystem.PushStreamSample(left_sample, right_sample);
    }

    public fun StopStream()
    {
        [Language(JavaScript)]
        if (this._audio_context != null)
        {
            if (this._audio_script_node != null)
            {
                this._audio_script_node.disconnect(this._audio_context.destination);
                this._audio_script_node.onaudioprocess = null;
                this._audio_script_node = null;
            }
            this._audio_context.close();
            this._audio_context = null;
        }

        [Language(Lua)]
        __CPPAPI_AudioSystem.StopStream();
    }

    public fun SetStreamMute(bool mute)
    {
        if (this._stream_mute == mute) return;
        this._stream_mute = mute;
        this.UpdateStreamVolume();
    }

    public fun GetStreamMute() : bool
    {
        return this._stream_mute;
    }

    // 设置音量
    // volume  取值 0-1
    public fun SetStreamVolume(double volume)
    {
        this._stream_volume = volume;
        this.UpdateStreamVolume();
    }

    // 获取音量
    public fun GetStreamVolume() : double
    {
        return this._stream_volume;
    }
}

public var A_AudioSystem = new AudioSystem();